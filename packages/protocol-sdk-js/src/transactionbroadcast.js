/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Catalyst.Protocol.Transaction.TransactionBroadcast');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.Catalyst.Protocol.Transaction.CFTransactionEntry');
goog.require('proto.Catalyst.Protocol.Transaction.STTransactionEntry');
goog.require('proto.google.protobuf.Timestamp');

goog.forwardDeclare('proto.Catalyst.Protocol.Transaction.TransactionType');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Catalyst.Protocol.Transaction.TransactionBroadcast.repeatedFields_, null);
};
goog.inherits(proto.Catalyst.Protocol.Transaction.TransactionBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.Transaction.TransactionBroadcast.displayName = 'proto.Catalyst.Protocol.Transaction.TransactionBroadcast';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Transaction.TransactionBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Transaction.TransactionBroadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactiontype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: (f = msg.getTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    transactionfees: jspb.Message.getFieldWithDefault(msg, 3, 0),
    locktime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stentriesList: jspb.Message.toObjectList(msg.getStentriesList(),
    proto.Catalyst.Protocol.Transaction.STTransactionEntry.toObject, includeInstance),
    cfentriesList: jspb.Message.toObjectList(msg.getCfentriesList(),
    proto.Catalyst.Protocol.Transaction.CFTransactionEntry.toObject, includeInstance),
    signature: msg.getSignature_asB64(),
    init: msg.getInit_asB64(),
    data: msg.getData_asB64(),
    from: msg.getFrom_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Transaction.TransactionBroadcast}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Transaction.TransactionBroadcast;
  return proto.Catalyst.Protocol.Transaction.TransactionBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Transaction.TransactionBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Transaction.TransactionBroadcast}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Catalyst.Protocol.Transaction.TransactionType} */ (reader.readEnum());
      msg.setTransactiontype(value);
      break;
    case 2:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactionfees(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLocktime(value);
      break;
    case 5:
      var value = new proto.Catalyst.Protocol.Transaction.STTransactionEntry;
      reader.readMessage(value,proto.Catalyst.Protocol.Transaction.STTransactionEntry.deserializeBinaryFromReader);
      msg.addStentries(value);
      break;
    case 6:
      var value = new proto.Catalyst.Protocol.Transaction.CFTransactionEntry;
      reader.readMessage(value,proto.Catalyst.Protocol.Transaction.CFTransactionEntry.deserializeBinaryFromReader);
      msg.addCfentries(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInit(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Transaction.TransactionBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Transaction.TransactionBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTransactionfees();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLocktime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getStentriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Catalyst.Protocol.Transaction.STTransactionEntry.serializeBinaryToWriter
    );
  }
  f = message.getCfentriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Catalyst.Protocol.Transaction.CFTransactionEntry.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional TransactionType TransactionType = 1;
 * @return {!proto.Catalyst.Protocol.Transaction.TransactionType}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getTransactiontype = function() {
  return /** @type {!proto.Catalyst.Protocol.Transaction.TransactionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Catalyst.Protocol.Transaction.TransactionType} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setTransactiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp TimeStamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 TransactionFees = 3;
 * @return {number}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getTransactionfees = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setTransactionfees = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 LockTime = 4;
 * @return {number}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getLocktime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setLocktime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated STTransactionEntry STEntries = 5;
 * @return {!Array<!proto.Catalyst.Protocol.Transaction.STTransactionEntry>}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getStentriesList = function() {
  return /** @type{!Array<!proto.Catalyst.Protocol.Transaction.STTransactionEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Catalyst.Protocol.Transaction.STTransactionEntry, 5));
};


/** @param {!Array<!proto.Catalyst.Protocol.Transaction.STTransactionEntry>} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setStentriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Catalyst.Protocol.Transaction.STTransactionEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Catalyst.Protocol.Transaction.STTransactionEntry}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.addStentries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Catalyst.Protocol.Transaction.STTransactionEntry, opt_index);
};


proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.clearStentriesList = function() {
  this.setStentriesList([]);
};


/**
 * repeated CFTransactionEntry CFEntries = 6;
 * @return {!Array<!proto.Catalyst.Protocol.Transaction.CFTransactionEntry>}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getCfentriesList = function() {
  return /** @type{!Array<!proto.Catalyst.Protocol.Transaction.CFTransactionEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Catalyst.Protocol.Transaction.CFTransactionEntry, 6));
};


/** @param {!Array<!proto.Catalyst.Protocol.Transaction.CFTransactionEntry>} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setCfentriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Catalyst.Protocol.Transaction.CFTransactionEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Catalyst.Protocol.Transaction.CFTransactionEntry}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.addCfentries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Catalyst.Protocol.Transaction.CFTransactionEntry, opt_index);
};


proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.clearCfentriesList = function() {
  this.setCfentriesList([]);
};


/**
 * optional bytes Signature = 7;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes Signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes Signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes Init = 9;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getInit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes Init = 9;
 * This is a type-conversion wrapper around `getInit()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInit()));
};


/**
 * optional bytes Init = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInit()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInit()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setInit = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes Data = 10;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes Data = 10;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes From = 11;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes From = 11;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes From = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.TransactionBroadcast.prototype.setFrom = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


