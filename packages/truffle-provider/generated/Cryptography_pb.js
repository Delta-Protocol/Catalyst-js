// source: Cryptography.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Network_pb = require('./Network_pb.js');
goog.object.extend(proto, Network_pb);
goog.exportSymbol('proto.Catalyst.Protocol.Cryptography.ErrorCode', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Cryptography.Signature', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Cryptography.SignatureType', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Cryptography.SigningContext', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Cryptography.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Cryptography.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Cryptography.Signature.displayName = 'proto.Catalyst.Protocol.Cryptography.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Cryptography.SigningContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Cryptography.SigningContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Cryptography.SigningContext.displayName = 'proto.Catalyst.Protocol.Cryptography.SigningContext';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Cryptography.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Cryptography.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Cryptography.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signingContext: (f = msg.getSigningContext()) && proto.Catalyst.Protocol.Cryptography.SigningContext.toObject(includeInstance, f),
    rawBytes: msg.getRawBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Cryptography.Signature}
 */
proto.Catalyst.Protocol.Cryptography.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Cryptography.Signature;
  return proto.Catalyst.Protocol.Cryptography.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Cryptography.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Cryptography.Signature}
 */
proto.Catalyst.Protocol.Cryptography.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Catalyst.Protocol.Cryptography.SigningContext;
      reader.readMessage(value,proto.Catalyst.Protocol.Cryptography.SigningContext.deserializeBinaryFromReader);
      msg.setSigningContext(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Cryptography.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Cryptography.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Cryptography.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigningContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Catalyst.Protocol.Cryptography.SigningContext.serializeBinaryToWriter
    );
  }
  f = message.getRawBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional SigningContext signing_context = 1;
 * @return {?proto.Catalyst.Protocol.Cryptography.SigningContext}
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.getSigningContext = function() {
  return /** @type{?proto.Catalyst.Protocol.Cryptography.SigningContext} */ (
    jspb.Message.getWrapperField(this, proto.Catalyst.Protocol.Cryptography.SigningContext, 1));
};


/**
 * @param {?proto.Catalyst.Protocol.Cryptography.SigningContext|undefined} value
 * @return {!proto.Catalyst.Protocol.Cryptography.Signature} returns this
*/
proto.Catalyst.Protocol.Cryptography.Signature.prototype.setSigningContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Cryptography.Signature} returns this
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.clearSigningContext = function() {
  return this.setSigningContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.hasSigningContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes raw_bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.getRawBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes raw_bytes = 2;
 * This is a type-conversion wrapper around `getRawBytes()`
 * @return {string}
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.getRawBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawBytes()));
};


/**
 * optional bytes raw_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawBytes()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.getRawBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Cryptography.Signature} returns this
 */
proto.Catalyst.Protocol.Cryptography.Signature.prototype.setRawBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Cryptography.SigningContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Cryptography.SigningContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signatureType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Cryptography.SigningContext}
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Cryptography.SigningContext;
  return proto.Catalyst.Protocol.Cryptography.SigningContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Cryptography.SigningContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Cryptography.SigningContext}
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Catalyst.Protocol.Network.NetworkType} */ (reader.readEnum());
      msg.setNetworkType(value);
      break;
    case 2:
      var value = /** @type {!proto.Catalyst.Protocol.Cryptography.SignatureType} */ (reader.readEnum());
      msg.setSignatureType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Cryptography.SigningContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Cryptography.SigningContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignatureType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Catalyst.Protocol.Network.NetworkType network_type = 1;
 * @return {!proto.Catalyst.Protocol.Network.NetworkType}
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.prototype.getNetworkType = function() {
  return /** @type {!proto.Catalyst.Protocol.Network.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Catalyst.Protocol.Network.NetworkType} value
 * @return {!proto.Catalyst.Protocol.Cryptography.SigningContext} returns this
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.prototype.setNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SignatureType signature_type = 2;
 * @return {!proto.Catalyst.Protocol.Cryptography.SignatureType}
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.prototype.getSignatureType = function() {
  return /** @type {!proto.Catalyst.Protocol.Cryptography.SignatureType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Catalyst.Protocol.Cryptography.SignatureType} value
 * @return {!proto.Catalyst.Protocol.Cryptography.SigningContext} returns this
 */
proto.Catalyst.Protocol.Cryptography.SigningContext.prototype.setSignatureType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.Catalyst.Protocol.Cryptography.SignatureType = {
  SIGNATURE_TYPE_UNKNOWN: 0,
  TRANSACTION_PUBLIC: 1,
  TRANSACTION_CONFIDENTIAL: 2,
  PROTOCOL_RPC: 3,
  PROTOCOL_PEER: 4
};

/**
 * @enum {number}
 */
proto.Catalyst.Protocol.Cryptography.ErrorCode = {
  ERROR_CODE_UNKNOWN: 0,
  INVALID_SIGNATURE: 1,
  INVALID_PUBLIC_KEY: 2,
  INVALID_PRIVATE_KEY: 3,
  SIGNATURE_VERIFICATION_FAILURE: 4,
  INVALID_CONTEXT_LENGTH: 5,
  NO_ERROR: 418
};

goog.object.extend(exports, proto.Catalyst.Protocol.Cryptography);
